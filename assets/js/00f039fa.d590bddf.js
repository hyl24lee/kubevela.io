(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[49850],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return d}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(t),d=o,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||r;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3474:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return i},toc:function(){return p},default:function(){return c}});var a=t(22122),o=t(19756),r=(t(67294),t(3905)),l={title:"Deploy First Application"},i={unversionedId:"quick-start",id:"version-v1.1/quick-start",isDocsHomePage:!1,title:"Deploy First Application",description:"Welcome to KubeVela! In this guide, we'll walk you through how to install KubeVela, and deploy your first simple application.",source:"@site/versioned_docs/version-v1.1/quick-start.md",sourceDirName:".",slug:"/quick-start",permalink:"/docs/quick-start",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/quick-start.md",version:"v1.1",lastUpdatedBy:"Lei Zhang (Harry)",lastUpdatedAt:1633157757,formattedLastUpdatedAt:"10/2/2021",frontMatter:{title:"Deploy First Application"},sidebar:"version-v1.1/docs",previous:{title:"Installation",permalink:"/docs/install"},next:{title:"Architecture",permalink:"/docs/core-concepts/architecture"}},p=[{value:"Installation",id:"installation",children:[]},{value:"A Simple Application",id:"a-simple-application",children:[]},{value:"Deploy More Components",id:"deploy-more-components",children:[{value:"Helm components",id:"helm-components",children:[]},{value:"Terraform components",id:"terraform-components",children:[]},{value:"Components from Git repository",id:"components-from-git-repository",children:[]}]},{value:"Attach Operational Behaviors",id:"attach-operational-behaviors",children:[]},{value:"Define Policies and Workflow",id:"define-policies-and-workflow",children:[]},{value:"What&#39;s Next",id:"whats-next",children:[]}],s={toc:p};function c(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Welcome to KubeVela! In this guide, we'll walk you through how to install KubeVela, and deploy your first simple application."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Make sure you have finished and verified KubeVela installation following ",(0,r.kt)("a",{parentName:"p",href:"install"},"this guide"),"."),(0,r.kt)("h2",{id:"a-simple-application"},"A Simple Application"),(0,r.kt)("p",null,"A simple deployment definition in KubeVela looks as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: first-vela-app\nspec:\n  components:\n    - name: express-server\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n        port: 8000\n      traits:\n        - type: ingress-1-20\n          properties:\n            domain: testsvc.example.com\n            http:\n              "/": 8000\n')),(0,r.kt)("p",null,"Now deploy it to KubeVela:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://raw.githubusercontent.com/oam-dev/kubevela/master/docs/examples/vela-app.yaml\n")),(0,r.kt)("p",null,"This command will deploy a web service component to target environment, which in our case is the Kubernetes cluster that KubeVela itself is installed."),(0,r.kt)("p",null,"After deployed, you can now directly visit this application as it already attached with a ",(0,r.kt)("inlineCode",{parentName:"p"},"ingress")," trait (assume your cluster has Ingress enabled)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ curl -H "Host:testsvc.example.com" http://<some ip address>/\n<xmp>\nHello World\n\n\n                                       ##         .\n                                 ## ## ##        ==\n                              ## ## ## ## ##    ===\n                           /""""""""""""""""\\___/ ===\n                      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n                           \\______ o          _,/\n                            \\      \\       _,\'\n                             `\'--.._\\..--\'\'\n</xmp>\n')),(0,r.kt)("h2",{id:"deploy-more-components"},"Deploy More Components"),(0,r.kt)("p",null,"KubeVela allows you to deploy diverse components types. In above example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Web Service")," component is actually a predefined ",(0,r.kt)("a",{parentName:"p",href:"https://cuelang.org/"},"CUE")," module. "),(0,r.kt)("p",null,"You can also try:"),(0,r.kt)("h3",{id:"helm-components"},"Helm components"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: app-delivering-chart\nspec:\n  components:\n    - name: redis-comp\n      type: helm\n      properties:\n        chart: redis-cluster\n        version: 6.2.7\n        url: https://charts.bitnami.com/bitnami\n        repoType: helm\n")),(0,r.kt)("h3",{id:"terraform-components"},"Terraform components"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: rds-cloud-source\nspec:\n  components:\n    - name: sample-db\n      type: alibaba-rds\n      properties:\n        instance_name: sample-db\n        account_name: oamtest\n        password: U34rfwefwefffaked\n        writeConnectionSecretToRef:\n          name: db-conn\n")),(0,r.kt)("h3",{id:"components-from-git-repository"},"Components from Git repository"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: git-app\nspec:\n  components:\n    - name: git-comp\n      type: kustomize\n      properties:\n        repoType: git\n        url: https://github.com/<path>/<to>/<repo>\n        git:\n          branch: master\n        path: ./app/dev/\n")),(0,r.kt)("p",null,"... and many many more. Please check the ",(0,r.kt)("inlineCode",{parentName:"p"},"Deploying Components")," section under ",(0,r.kt)("inlineCode",{parentName:"p"},"User Manuals")," for all supported types, and even go ahead to add your own."),(0,r.kt)("h2",{id:"attach-operational-behaviors"},"Attach Operational Behaviors"),(0,r.kt)("p",null,"KubeVela is not just about deploy. It allows you to attach predefined operational behaviors (named ",(0,r.kt)("inlineCode",{parentName:"p"},"Traits"),") to your components in-place. For example, let's assign a batch rollout strategy to our web service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: rollout-trait-test\nspec:\n  components:\n    - name: express-server\n      type: webservice\n      externalRevision: express-server-v1\n      properties:\n        image: stefanprodan/podinfo:4.0.3\n      traits:\n        - type: rollout\n          properties:\n            targetSize: 5\n            rolloutBatches:\n              - replicas: 2\n              - replicas: 3\n")),(0,r.kt)("p",null,"Now whenever the image version is updated in above YAML file, the ",(0,r.kt)("inlineCode",{parentName:"p"},"express-server")," component will rollout following strategy defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"rolloutBatches"),". "),(0,r.kt)("p",null,"For all supported traits in KubeVela, please check ",(0,r.kt)("inlineCode",{parentName:"p"},"Attaching Traits")," section under ",(0,r.kt)("inlineCode",{parentName:"p"},"User Manuals"),". Not surprisingly, you can also add your own traits to KubeVela with just minimal effort."),(0,r.kt)("h2",{id:"define-policies-and-workflow"},"Define Policies and Workflow"),(0,r.kt)("p",null,"Components and traits are just the beginning of your vela sail. KubeVela is by design a full functional Continuous Delivery (CD) platform with fine grained support for hybrid/multi-cloud/multi-cluster deployment."),(0,r.kt)("p",null,"Let's say:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"I want to deploy an micro-services application with two components, firstly to staging cluster with only 1 instance, then pause and wait for manual approval. If approved, then deploy it to production cluster but with instances scaled to 3.")),(0,r.kt)("p",null,"Oops, imagine how many add-hoc scripts and glue code are needed in your CI/CD pipeline to achieve automation and deployment success rate in above process."),(0,r.kt)("p",null,"While with KubeVela, above process can be easily modeled as a declarative deployment plan as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: example-app\n  namespace: default\nspec:\n  components:\n    - name: hello-world-server\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n        port: 8000\n      traits:\n        - type: scaler\n          properties:\n            replicas: 1\n    - name: data-worker\n      type: worker\n      properties:\n        image: busybox\n        cmd:\n          - sleep\n          - '1000000'\n  policies:\n    - name: example-multi-env-policy\n      type: env-binding\n      properties:\n        envs:\n          - name: staging\n            placement: # selecting the cluster to deploy to\n              clusterSelector:\n                name: cluster-staging\n            selector: # selecting which component to use\n              components:\n                - hello-world-server\n\n          - name: prod\n            placement:\n              clusterSelector:\n                name: cluster-prod\n            patch: # overlay patch on above components\n              components:\n                - name: hello-world-server\n                  type: webservice\n                  traits:\n                    - type: scaler\n                      properties:\n                        replicas: 3\n\n    - name: health-policy-demo\n      type: health\n      properties:\n        probeInterval: 5\n        probeTimeout: 10\n\n  workflow:\n    steps:\n      # deploy to staging env\n      - name: deploy-staging\n        type: deploy2env\n        properties:\n          policy: example-multi-env-policy\n          env: staging\n\n      # manual check\n      - name: manual-approval\n        type: suspend\n\n      # deploy to prod env\n      - name: deploy-prod\n        type: deploy2env\n        properties:\n          policy: example-multi-env-policy\n          env: prod\n")),(0,r.kt)("p",null,"No more add-hoc scripts or glue code, KubeVela will get the application delivery workflow done with full automation and determinism. Most importantly, KubeVela expects you keep using the CI solutions you are already familiar with and KubeVela is fully complementary to them as the CD control plane."),(0,r.kt)("p",null,"For using KubeVela with your own CI pipelines and other tools, please check ",(0,r.kt)("inlineCode",{parentName:"p"},"Best Practices")," section in the sidebar for more real world examples."),(0,r.kt)("h2",{id:"whats-next"},"What's Next"),(0,r.kt)("p",null,"All above features are just the first glance of KubeVela. For next steps, we recommend:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Learn KubeVela's ",(0,r.kt)("a",{parentName:"li",href:"./core-concepts/application"},"application model"),"."),(0,r.kt)("li",{parentName:"ul"},"Interested in KubeVela itself? Learn its ",(0,r.kt)("a",{parentName:"li",href:"./core-concepts/architecture"},"design and architecture"),".")))}c.isMDXComponent=!0}}]);