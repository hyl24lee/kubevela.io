(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[72333],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return a?n.createElement(y,i(i({ref:t},p),{},{components:a})):n.createElement(y,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},31532:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return i},metadata:function(){return o},toc:function(){return s},default:function(){return p}});var n=a(22122),r=a(19756),l=(a(67294),a(3905)),i={title:"Managing Capabilities"},o={unversionedId:"developers/cap-center",id:"developers/cap-center",isDocsHomePage:!1,title:"Managing Capabilities",description:"In KubeVela, developers can install more capabilities (i.e. new component types and traits) from any GitHub repo that contains OAM definition files. We call these GitHub repos as Capability Centers.",source:"@site/docs/developers/cap-center.md",sourceDirName:"developers",slug:"/developers/cap-center",permalink:"/docs/next/developers/cap-center",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/developers/cap-center.md",version:"current",lastUpdatedBy:"qiaozp",lastUpdatedAt:1635321614,formattedLastUpdatedAt:"10/27/2021",frontMatter:{title:"Managing Capabilities"}},s=[{value:"Add a capability center",id:"add-a-capability-center",children:[]},{value:"List capability centers",id:"list-capability-centers",children:[]},{value:"Optional Remove a capability center",id:"optional-remove-a-capability-center",children:[]},{value:"List all available capabilities in capability center",id:"list-all-available-capabilities-in-capability-center",children:[]},{value:"Use the newly installed capability",id:"use-the-newly-installed-capability",children:[]},{value:"Uninstall a capability",id:"uninstall-a-capability",children:[]}],c={toc:s};function p(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"In KubeVela, developers can install more capabilities (i.e. new component types and traits) from any GitHub repo that contains OAM definition files. We call these GitHub repos as ",(0,l.kt)("em",{parentName:"p"},"Capability Centers"),". "),(0,l.kt)("p",null,"KubeVela is able to discover OAM definition files in this repo automatically and sync them to your own KubeVela platform."),(0,l.kt)("h2",{id:"add-a-capability-center"},"Add a capability center"),(0,l.kt)("p",null,"Add a registry in KubeVela:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vela registry config my-center https://github.com/oam-dev/catalog/tree/master/registry\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"Successfully configured registry my-center\n")),(0,l.kt)("p",null,"Now, this registry ",(0,l.kt)("inlineCode",{parentName:"p"},"my-center")," is ready to use."),(0,l.kt)("h2",{id:"list-capability-centers"},"List capability centers"),(0,l.kt)("p",null,"You are allowed to add more capability centers and list them."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vela registry ls\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"NAME            URL                                                    \ndefault         oss://registry.kubevela.net/                            \nmy-center       https://github.com/oam-dev/catalog/tree/master/registry \n")),(0,l.kt)("h2",{id:"optional-remove-a-capability-center"},"[Optional]"," Remove a capability center"),(0,l.kt)("p",null,"Or, remove one."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vela registry remove my-center\n")),(0,l.kt)("h2",{id:"list-all-available-capabilities-in-capability-center"},"List all available capabilities in capability center"),(0,l.kt)("p",null,"Or, list all available ComponentDefinition/TraitDefinition in certain registry."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vela trait --discover --registry=my-center\nvela comp --discover --registry=my-center\n\n## Install a capability from capability center\n\nNow let's try to install the new component named `clonesetservice` from `my-center` to your own KubeVela platform.\n\nYou need to install OpenKruise first.\n\n```shell\nhelm install kruise https://github.com/openkruise/kruise/releases/download/v0.7.0/kruise-chart.tgz\n")),(0,l.kt)("p",null,"Install ",(0,l.kt)("inlineCode",{parentName:"p"},"clonesetservice")," component from ",(0,l.kt)("inlineCode",{parentName:"p"},"my-center"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vela comp get clonesetservice --registry=my-center\n")),(0,l.kt)("h2",{id:"use-the-newly-installed-capability"},"Use the newly installed capability"),(0,l.kt)("p",null,"Let's check the ",(0,l.kt)("inlineCode",{parentName:"p"},"clonesetservice")," appears in your platform firstly:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vela components\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"NAME            NAMESPACE   WORKLOAD                    DESCRIPTION\nclonesetservice vela-system clonesets.apps.kruise.io    Describes long-running, scalable, containerized services\n                                                        that have a stable network endpoint to receive external\n                                                        network traffic from customers. If workload type is skipped\n                                                        for any service defined in Appfile, it will be defaulted to\n                                                        `webservice` type.\n")),(0,l.kt)("p",null,"Great! Now let's deploy an app via Appfile."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cat << EOF > vela.yaml\nname: testapp\nservices:\n  testsvc:\n    type: clonesetservice\n    image: crccheck/hello-world\n    port: 8000\nEOF\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vela up\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"Parsing vela appfile ...\nLoad Template ...\n\nRendering configs for service (testsvc)...\nWriting deploy config to (.vela/deploy.yaml)\n\nApplying application ...\nChecking if app has been deployed...\nApp has not been deployed, creating a new deployment...\nUpdating:  core.oam.dev/v1alpha2, Kind=HealthScope in default\n\u2705 App has been deployed \ud83d\ude80\ud83d\ude80\ud83d\ude80\n    Port forward: vela port-forward testapp\n             SSH: vela exec testapp\n         Logging: vela logs testapp\n      App status: vela status testapp\n  Service status: vela status testapp --svc testsvc\n")),(0,l.kt)("p",null,"then you can Get a cloneset in your environment."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get clonesets.apps.kruise.io\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"NAME      DESIRED   UPDATED   UPDATED_READY   READY   TOTAL   AGE\ntestsvc   1         1         1               1       1       46s\n")),(0,l.kt)("h2",{id:"uninstall-a-capability"},"Uninstall a capability"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"NOTE: make sure no apps are using the capability before uninstalling.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete componentdefinition -n vela-system clonesetservice\n")))}p.isMDXComponent=!0}}]);