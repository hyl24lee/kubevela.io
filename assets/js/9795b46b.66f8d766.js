(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[63555],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?o.createElement(y,i(i({ref:t},p),{},{components:n})):o.createElement(y,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25898:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var o=n(22122),a=n(19756),r=(n(67294),n(3905)),i={title:"The Application Model"},l={unversionedId:"core-concepts/application",id:"core-concepts/application",isDocsHomePage:!1,title:"The Application Model",description:"KubeVela introduces Open Application Model (OAM) to capture a full deployment of micro-services application across hybrid environments.",source:"@site/docs/core-concepts/application.md",sourceDirName:"core-concepts",slug:"/core-concepts/application",permalink:"/docs/next/core-concepts/application",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/core-concepts/application.md",version:"current",lastUpdatedBy:"Lei Zhang (Harry)",lastUpdatedAt:1634366790,formattedLastUpdatedAt:"10/16/2021",frontMatter:{title:"The Application Model"},sidebar:"docs",previous:{title:"Architecture",permalink:"/docs/next/core-concepts/architecture"},next:{title:"Jenkins CI/CD",permalink:"/docs/next/case-studies/jenkins-cicd"}},s=[{value:"The Application Deployment Plan",id:"the-application-deployment-plan",children:[{value:"Components",id:"components",children:[]},{value:"Traits",id:"traits",children:[]},{value:"Policy",id:"policy",children:[]},{value:"Workflow",id:"workflow",children:[]}]},{value:"What&#39;s Next",id:"whats-next",children:[]}],c={toc:s};function p(e){var t=e.components,i=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,o.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"KubeVela introduces Open Application Model (OAM) to capture a full deployment of micro-services application across hybrid environments."),(0,r.kt)("h2",{id:"the-application-deployment-plan"},"The Application Deployment Plan"),(0,r.kt)("p",null,"With this model, a typical deployment plan in KubeVela looks as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# sample.yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: website\nspec:\n  components:\n    - name: frontend              # e.g. we want to deploy a frontend component and serves as web service\n      type: webservice\n      properties:\n        image: nginx\n      traits:\n        - type: cpuscaler         # e.g. we add a CPU based auto scaler to this component\n          properties:\n            min: 1\n            max: 10\n            cpuPercent: 60\n        - type: sidecar           # add a sidecar container into this component\n          properties:\n            name: "sidecar-test"\n            image: "fluentd"\n    - name: backend\n      type: worker\n      properties:\n        image: busybox\n        cmd:\n          - sleep\n          - \'1000\'\n  policies:\n    - name: demo-policy\n      type: env-binding\n      properties:\n        envs:\n          - name: test\n            placement:\n              clusterSelector:\n                name: cluster-test\n          - name: prod\n            placement:\n              clusterSelector:\n                name: cluster-prod\n  workflow:\n    steps:\n      #workflow step name\n      - name: deploy-test-env\n        type: deploy2env\n        properties:\n          # Specify the policy name\n          policy: demo-policy\n          # Specify the env name in the policy\n          env: test    \n      - name: manual-approval\n        # use suspend can stop workflow and wait here until condition changed\n        type: suspend\n      - name: deploy-prod-env\n        type: deploy2env\n        properties:\n          # Specify the policy name\n          policy: demo-policy\n          # Specify the env name in the policy\n          env: prod    \n')),(0,r.kt)("p",null,"The building blocks in this entity are explained as below."),(0,r.kt)("h3",{id:"components"},"Components"),(0,r.kt)("p",null,"An application could be composed by multiple components. KubeVela already built-in with several widely used components definitions to help you model an application deployment, you can list them by using ",(0,r.kt)("a",{parentName:"p",href:"../install#3-get-kubevela-cli"},"KubeVela CLI"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"vela components \n")),(0,r.kt)("p",null,"The output shows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NAME          NAMESPACE   WORKLOAD                              DESCRIPTION\nhelm          vela-system autodetects.core.oam.dev              helm release is a group of K8s resources from either git\n                                                                repository or helm repo\nkustomize     vela-system autodetects.core.oam.dev              kustomize can fetching, building, updating and applying\n                                                                Kustomize manifests from git repo.\ntask          vela-system jobs.batch                            Describes jobs that run code or a script to completion.\nwebservice    vela-system deployments.apps                      Describes long-running, scalable, containerized services\n                                                                that have a stable network endpoint to receive external\n                                                                network traffic from customers.\nworker        vela-system deployments.apps                      Describes long-running, scalable, containerized services\n                                                                that running at backend. They do NOT have network endpoint\n                                                                to receive external network traffic.                    \nalibaba-ack   vela-system configurations.terraform.core.oam.dev Terraform configuration for Alibaba Cloud ACK cluster\nalibaba-oss   vela-system configurations.terraform.core.oam.dev Terraform configuration for Alibaba Cloud OSS object\nalibaba-rds   vela-system configurations.terraform.core.oam.dev Terraform configuration for Alibaba Cloud RDS object\n")),(0,r.kt)("h3",{id:"traits"},"Traits"),(0,r.kt)("p",null,"Traits are operational behaviors that you can attach to component. KubeVela also has built-in traits installed, search them by using ",(0,r.kt)("a",{parentName:"p",href:"../install#3-get-kubevela-cli"},"KubeVela CLI"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"vela traits \n")),(0,r.kt)("p",null,"The result can be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NAME        NAMESPACE   APPLIES-TO        CONFLICTS-WITH  POD-DISRUPTIVE  DESCRIPTION                                          \nannotations vela-system deployments.apps                  true            Add annotations for your Workload.                   \ncpuscaler   vela-system webservice,worker                 false           Automatically scale the component based on CPU usage.\ningress     vela-system webservice,worker                 false           Enable public web traffic for the component.         \nlabels      vela-system deployments.apps                  true            Add labels for your Workload.                        \nscaler      vela-system webservice,worker                 false           Manually scale the component.                        \nsidecar     vela-system deployments.apps                  true            Inject a sidecar container to the component.   \n")),(0,r.kt)("h3",{id:"policy"},"Policy"),(0,r.kt)("p",null,"Policy enforces deployment process of the application, such as quality gates, security groups, placement strategy, fire walls, SLO targets and so on."),(0,r.kt)("h3",{id:"workflow"},"Workflow"),(0,r.kt)("p",null,"Workflow allows you to assemble components, operation and task steps into a DAG, and it is process-oriented. Typical workflow steps includes pause, manual verification, waiting state, data flow transmission, multi-environment rollout, and A/B testing, etc."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"alt",src:n(75583).Z})),(0,r.kt)("p",null,"Each policy and workflow step is a independent capability entity that is fully plugable, KubeVela allows you to create your own step through CUE."),(0,r.kt)("h2",{id:"whats-next"},"What's Next"),(0,r.kt)("p",null,"Here are some recommended next steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start using KubeVela from deploying ",(0,r.kt)("a",{parentName:"li",href:"../end-user/components/helm"},"Helm component"),"."),(0,r.kt)("li",{parentName:"ul"},"Learn about ",(0,r.kt)("a",{parentName:"li",href:"../platform-engineers/oam/oam-model"},"customizing this application model")," in programmable approach.")))}p.isMDXComponent=!0},75583:function(e,t,n){"use strict";t.Z=n.p+"assets/images/workflow-e0a579e6870f49f8772beea717e72efb.png"}}]);