(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[88001],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},89279:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var a=t(22122),o=t(19756),r=(t(67294),t(3905)),i={title:"Binding Traits"},l={unversionedId:"end-user/binding-traits",id:"version-v1.1/end-user/binding-traits",isDocsHomePage:!1,title:"Binding Traits",description:"Traits is also one of the core concepts of the application. It acts on the component level and allows you to freely bind various operation and maintenance actions and strategies to the component. For example, configuration gateway, label management and container injection (Sidecar) at the business level, or flexible scaler at the admin level, gray release, etc.",source:"@site/versioned_docs/version-v1.1/end-user/binding-traits.md",sourceDirName:"end-user",slug:"/end-user/binding-traits",permalink:"/docs/end-user/binding-traits",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/end-user/binding-traits.md",version:"v1.1",lastUpdatedBy:"yangsoon",lastUpdatedAt:1631690672,formattedLastUpdatedAt:"9/15/2021",frontMatter:{title:"Binding Traits"}},s=[{value:"KubeVela&#39;s Trait",id:"kubevelas-trait",children:[]},{value:"Use Ingress to Configure the Gateway",id:"use-ingress-to-configure-the-gateway",children:[]},{value:"Attach Labels and Annotations to Component",id:"attach-labels-and-annotations-to-component",children:[]},{value:"Inject the Container Into the Component (Sidecar)",id:"inject-the-container-into-the-component-sidecar",children:[]},{value:"Custom Trait",id:"custom-trait",children:[]},{value:"Next",id:"next",children:[]}],p={toc:s};function c(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Traits is also one of the core concepts of the application. It acts on the component level and allows you to freely bind various operation and maintenance actions and strategies to the component. For example, configuration gateway, label management and container injection (Sidecar) at the business level, or flexible scaler at the admin level, gray release, etc."),(0,r.kt)("p",null,"Similar to Component, KubeVela provides a series of out-of-the-box traits, and also allows you to customize and extend other operation and maintenance capabilities with traits."),(0,r.kt)("h2",{id:"kubevelas-trait"},"KubeVela's Trait"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ vela traits\nNAME                        NAMESPACE   APPLIES-TO          CONFLICTS-WITH  POD-DISRUPTIVE  DESCRIPTION\nannotations                 vela-system *                                   true            Add annotations on K8s pod for your workload which follows\n                                                                                            the pod spec in path 'spec.template'.\nconfigmap                   vela-system *                                   true            Create/Attach configmaps on K8s pod for your workload which\n                                                                                            follows the pod spec in path 'spec.template'.\nenv                         vela-system *                                   false           add env on K8s pod for your workload which follows the pod\n                                                                                            spec in path 'spec.template.'\ningress                     vela-system                                     false           Enable public web traffic for the component.\ningress-1-20                vela-system                                     false           Enable public web traffic for the component, the ingress API\n                                                                                            matches K8s v1.20+.\nlabels                      vela-system *                                   true            Add labels on K8s pod for your workload which follows the\n                                                                                            pod spec in path 'spec.template'.\nlifecycle                   vela-system *                                   true            Add lifecycle hooks for the first container of K8s pod for\n                                                                                            your workload which follows the pod spec in path\n                                                                                            'spec.template'.\nrollout                     vela-system                                     false           rollout the component\nsidecar                     vela-system *                                   true            Inject a sidecar container to K8s pod for your workload\n                                                                                            which follows the pod spec in path 'spec.template'.\n...\n")),(0,r.kt)("p",null,"Below, we will take a few typical traits as examples to introduce the usage of KubeVela Trait."),(0,r.kt)("h2",{id:"use-ingress-to-configure-the-gateway"},"Use Ingress to Configure the Gateway"),(0,r.kt)("p",null,"We will configure a gateway for a Web Service component as an example. This component is pulled from the ",(0,r.kt)("inlineCode",{parentName:"p"},"crccheck/hello-world")," image. After setting the gateway, it provides external access through ",(0,r.kt)("inlineCode",{parentName:"p"},"testsvc.example.com")," plus port 8000."),(0,r.kt)("p",null,"Please directly copy the following Shell code, which will be applied to the cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'cat <<EOF | kubectl apply -f -\n# YAML begins\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: ingress-app\nspec:\n  components:\n    - name: express-server\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n        port: 8000\n      traits:\n        - type: ingress\n          properties:\n            domain: testsvc.example.com\n            http:\n              "/": 8000\n# YAML ends\nEOF\n')),(0,r.kt)("p",null,"You can also save the YAML file as ingerss-app.yaml and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl apply -f ingerss-app.yaml")," command to deploy."),(0,r.kt)("p",null,"When we see that the status of the application is running and the service is healthy through ",(0,r.kt)("inlineCode",{parentName:"p"},"vela ls"),", it means that the application is fully effective. At the same time, its TRAITS type is also correctly displayed as ingress."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ vela ls\nAPP                     COMPONENT       TYPE        TRAITS  PHASE   HEALTHY STATUS  CREATED-TIME                 \ningerss-app             express-server  webservice  ingress running healthy         2021-08-28 21:49:44 +0800 CST\n")),(0,r.kt)("p",null,"If the status is displayed as rendering, it means that it is still being rendered, or HEALTHY is always false, you need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl get application ingress-app -o yaml")," to view the error message in the return."),(0,r.kt)("p",null,"View the information returned:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get application ingress-app -o yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  ... # Omit non-critical information\nspec:\n  ... # Omit non-critical information\nstatus:\n  ... # Omit non-critical information\n  services:\n  - healthy: true\n    name: express-server\n    traits:\n    - healthy: true\n      message: |\n        No loadBalancer found, visiting by using 'vela port-forward ingress-app'\n      type: ingress\n    workloadDefinition:\n      apiVersion: apps/v1\n      kind: Deployment\n  status: running\n")),(0,r.kt)("p",null,"Then, it is forwarded to the local processing request through vela port-forward ingress-app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"vela port-forward ingress-app\nForwarding from 127.0.0.1:8000 -> 8000\nForwarding from [::1]:8000 -> 8000\n\nForward successfully! Opening browser ...\nHandling connection for 8000\n")),(0,r.kt)("p",null,"Access service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -H "Host:testsvc.example.com" http://127.0.0.1:8000/\nHello World\n\n\n                                       ##         .\n                                 ## ## ##        ==\n                              ## ## ## ## ##    ===\n                           /""""""""""""""""\\___/ ===\n                      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n                           \\______ o          _,/\n                            \\      \\       _,\'\n                             `\'--.._\\..--\'\'\n')),(0,r.kt)("h2",{id:"attach-labels-and-annotations-to-component"},"Attach Labels and Annotations to Component"),(0,r.kt)("p",null,"Labels and Annotations Trait allow you to attach labels and annotations to components, allowing us to trigger the marked components and obtain annotation information on demand when implementing business logic."),(0,r.kt)("p",null,"First, we prepare an example of an application, please copy and execute it directly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'cat <<EOF | kubectl apply -f -\n# YAML begins\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: labels-annotations\nspec:\n  components:\n    - name: server\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n        port: 8000\n      traits:\n        - type: labels\n          properties:\n            "release": "stable"\n        - type: annotations\n          properties:\n            "description": "web application"\n# YAML ends\nEOF\n')),(0,r.kt)("p",null,"In the above business, we define the component named ",(0,r.kt)("inlineCode",{parentName:"p"},"server"),", specify it for stable release through labels, and annotate it to be a business for web applications through annotations."),(0,r.kt)("p",null,"On the runtime cluster, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"vela ls")," command to check whether the application has been successfully created:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ vela ls\nAPP                     COMPONENT       TYPE        TRAITS  PHASE   HEALTHY STATUS  CREATED-TIME                 \nlabels-annotations      server          webservice  labels,annotations  running healthy         2021-08-29 20:55:28 +0800 CST\n")),(0,r.kt)("p",null,"Through Kubernetes commands, we can see that the underlying resources have been labeled accordingly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ kubectl get deployments server -o jsonpath=\'{.spec.template.metadata.labels}\'\n{"app.oam.dev/component":"server","release":"stable"}\n\n$ kubectl get deployments server -o jsonpath=\'{.spec.template.metadata.annotations}\'\n{"app.oam.dev/component":"server","release":"stable"}\n')),(0,r.kt)("h2",{id:"inject-the-container-into-the-component-sidecar"},"Inject the Container Into the Component (Sidecar)"),(0,r.kt)("p",null,"As the existence of sidecar container decoupling from business container, it can help us with many auxiliary important tasks, such as common log proxy, used to implement Service Mesh, and so on."),(0,r.kt)("p",null,"Let's write a ",(0,r.kt)("inlineCode",{parentName:"p"},"log-gen-worker")," component in an application. At the same time, we point the log data directory recorded by the sidecar and the component to the same data storage volume ",(0,r.kt)("inlineCode",{parentName:"p"},"varlog"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cat <<EOF | kubectl apply -f -\n# YAML begins\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: vela-app-with-sidecar\nspec:\n  components:\n    - name: log-gen-worker\n      type: worker\n      properties:\n        image: busybox\n        cmd:\n          - /bin/sh\n          - -c\n          - >\n            i=0;\n            while true;\n            do\n              echo \"$i: $(date)\" >> /var/log/date.log;\n              i=$((i+1));\n              sleep 1;\n            done\n        volumes:\n          - name: varlog\n            mountPath: /var/log\n            type: emptyDir\n      traits:\n        - type: sidecar\n          properties:\n            name: count-log\n            image: busybox\n            cmd: [ /bin/sh, -c, 'tail -n+1 -f /var/log/date.log']\n            volumes:\n              - name: varlog\n                path: /var/log\n# YAML ends\nEOF\n")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"vela ls")," to check whether the application is successfully deployed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ vela ls\nAPP                     COMPONENT       TYPE        TRAITS  PHASE   HEALTHY STATUS  CREATED-TIME                 \nvela-app-with-sidecar   log-gen-worker  worker      sidecar             running healthy         2021-08-29 22:07:07 +0800 CST\n")),(0,r.kt)("p",null,"After success, first to look out the workload generated by the application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ kubectl get pods -l app.oam.dev/component=log-gen-worker\nNAME                              READY   STATUS    RESTARTS   AGE\nlog-gen-worker-7bb65dcdd6-tpbdh   2/2     Running   0          45s\n")),(0,r.kt)("p",null,"Finally, check the log output by the sidecar, you can see that the sidecar that reads the log has taken effect."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl logs -f log-gen-worker-7bb65dcdd6-tpbdh count-log\n")),(0,r.kt)("p",null,"Above, we took several common traits as examples to introduce how to bind traits. For more trait's functions and parameters, please go to built-in Trait view."),(0,r.kt)("h2",{id:"custom-trait"},"Custom Trait"),(0,r.kt)("p",null,"When the built-in Trait cannot meet your needs, you can freely customize the maintenance capabilities. Please refer to ",(0,r.kt)("a",{parentName:"p",href:"../platform-engineers/traits/customize-trait"},"Custom Trait")," in the Admin Guide for implementation."),(0,r.kt)("h2",{id:"next"},"Next"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./components/cloud-services/provider-and-consume-cloud-services"},"Integrated Cloud Services"),", learn how to integrate cloud services from various cloud vendors"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./rollout-scaler"},"Rollout & Scaler"))))}c.isMDXComponent=!0}}]);